// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model VilleIndicateur {
  code_insee                  String   @id
  nom_commune                 String
  departement                 String

  // Nouveaux champs INSEE
  population                  Int?      // P20_POP
  nb_logements                Int?      // LOG
  nb_residences_principales  Int?      // RP
  nb_residences_secondaires  Int?      // RESSEC
  nb_logements_vacants       Int?      // LOGVAC

  part_proprietaires          Float?    // PROP / RP
  part_locataires             Float?    // LOC / RP
  part_loges_gratuitement    Float?    // GRAT / RP

  taux_vacance                Float?    // LOGVAC / LOG

  part_menages_1_personne     Float?    // PIMP / RP
  part_menages_5_personnes    Float?    // PMEN5P / RP

  part_diplomes_supp          Float?    // DIPL17_DIPSUP
  part_mobilite_recent        Float?    // POP5P15P

  // Déjà présents
  prix_m2_achat_maison        Float?
  prix_m2_achat_appartement   Float?
  
  loyer_m2_maison           Float?
  loyer_m2_appart_petit     Float?
  loyer_m2_appart_grand     Float?
  
  type_zone                  String?
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  firstName      String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt DateTime @default(now())

  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Analyse {
  id                     Int      @id @default(autoincrement())
  userEmail              String
  description            String
  rentabilite            String?
  loyerEstimation        String?
  loyerExplication       String?
  fiscaliteRegime        String?
  fiscaliteExplication   String?
  recommandations        String[] // @db.Text[] pour PostgreSQL
  forces                 String[]
  faiblesses             String[]
  questions              String[]
  strategie              String?
  estimation             String?
  prixAffiche            String?
  prixM2Quartier         String?
  commentaireEstimation  String?
  positionnement         String?
  estZoneTendue          Boolean?
  commentaireZoneTendue  String?
  infoReglementaire      String?
  createdAt              DateTime @default(now())
}


