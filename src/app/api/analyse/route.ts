import { sendFirstAnalyseEmail } from "@/lib/email/sendFirstAnalyseEmail";
import { PrismaClient } from "@prisma/client"; // adapte ce chemin si besoin
import { getServerSession } from "next-auth";
import { NextRequest, NextResponse } from "next/server";
import { OpenAI } from "openai";

const prisma = new PrismaClient();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function sendDiscordNotification({
  userEmail,
  ville,
  result,
}: {
  userEmail: string;
  ville: string;
  result: any;
}) {
  const webhookUrl = process.env.DISCORD_ANALYSE_WEBHOOK;
  if (!webhookUrl) return;

  const content = `üìä Nouvelle analyse immobili√®re effectu√©e pour la commune de **${ville}** par **${userEmail}**`;

  const embed = {
    title: "Analyse lanc√©e",
    color: 3447003, // bleu
    fields: [
      {
        name: "Commune",
        value: ville,
        inline: true,
      },
      {
        name: "Rentabilit√© estim√©e",
        value: result.rentabilite,
        inline: true,
      },
      {
        name: "Loyer estim√©",
        value: result.loyer.estimation,
        inline: true,
      },
    ],
    footer: {
      text: "PropertAI ‚Äì Analyse automatis√©e",
    },
    timestamp: new Date().toISOString(),
  };

  try {
    await fetch(webhookUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        content,
        embeds: [embed],
      }),
    });
  } catch (err) {
    console.error("‚ùå Erreur Discord webhook :", err);
  }
}

export async function POST(req: NextRequest) {
  const session = await getServerSession();
  if (!session?.user?.email) {
    return new Response("Unauthorized", { status: 401 });
  }

  const { description } = await req.json();

  if (!description) {
    return NextResponse.json(
      { error: "Description manquante" },
      { status: 400 }
    );
  }

  let ville = null;

  const extractionPrompt = `
√Ä partir de cette description immobili√®re, renvoie uniquement le **nom de la commune** sans aucun texte autour.

"""${description}"""
  `;

  const extraction = await openai.chat.completions.create({
    model: "gpt-3.5-turbo-1106",
    temperature: 0,
    messages: [{ role: "user", content: extractionPrompt }],
  });

  const rawVille = extraction.choices[0].message.content?.trim();
  console.log("üèôÔ∏è Ville extraite :", rawVille);

  if (rawVille) {
    ville = await prisma.villeIndicateur.findFirst({
      where: {
        nom_commune: {
          equals: rawVille,
          mode: "insensitive",
        },
      },
    });
  }

  if (!ville) {
    return NextResponse.json(
      { error: "Commune introuvable en base" },
      { status: 404 }
    );
  }

  console.log("‚úÖ Commune trouv√©e :", ville.nom_commune);

  // Pr√©pare les donn√©es locales pour le prompt
  const estZoneTendue = ["A", "A bis", "B1"].includes(ville.type_zone ?? "");

  const dataLocal = {
    prixM2AchatMaison: ville.prix_m2_achat_maison ?? "inconnu",
    prixM2AchatAppartement: ville.prix_m2_achat_appartement ?? "inconnu",
    loyerM2Maison: ville.loyer_m2_maison ?? "inconnu",
    loyerM2AppartPetit: ville.loyer_m2_appart_petit ?? "inconnu",
    loyerM2AppartGrand: ville.loyer_m2_appart_grand ?? "inconnu",
    tauxVacance: ville.taux_vacance ?? "inconnu",
    partLocataires: ville.part_locataires ?? "inconnu",
    nbLogements: ville.nb_logements ?? "inconnu",
    nbLogementsVacants: ville.nb_logements_vacants ?? "inconnu",
    nbResidencesPrincipales: ville.nb_residences_principales ?? "inconnu",
    nbResidencesSecondaires: ville.nb_residences_secondaires ?? "inconnu",
    partDiplomesSuperieur: ville.part_diplomes_supp ?? "inconnu",
    partLogesGratuit: ville.part_loges_gratuitement ?? "inconnu",
    partMenages1P: ville.part_menages_1_personne ?? "inconnu",
    partMenages5P: ville.part_menages_5_personnes ?? "inconnu",
    partMobiliteRecent: ville.part_mobilite_recent ?? "inconnu",
    population: ville.population ?? "inconnu",
    zoneTendue: estZoneTendue ? "Oui" : "Non",
  };

  // 3Ô∏è‚É£ Cr√©er le prompt final d'analyse enrichi
  const promptAnalyse = `
Tu es un expert en investissement immobilier. Ton r√¥le est d‚Äôanalyser une description de bien immobilier pour en d√©duire :

- Sa rentabilit√© brute estim√©e
- La meilleure strat√©gie d'exploitation
- Les forces et faiblesses du bien
- Les questions cl√©s √† poser
- La tension locative et les risques √©ventuels

Voici les **donn√©es locales fiables** pour la commune "${ville.nom_commune}" :

- Prix moyen achat maison : ${dataLocal.prixM2AchatMaison} ‚Ç¨/m¬≤
- Prix moyen achat appartement : ${dataLocal.prixM2AchatAppartement} ‚Ç¨/m¬≤
- Loyer moyen maison : ${dataLocal.loyerM2Maison} ‚Ç¨/m¬≤
- Loyer moyen petit appartement : ${dataLocal.loyerM2AppartPetit} ‚Ç¨/m¬≤
- Loyer moyen grand appartement : ${dataLocal.loyerM2AppartGrand} ‚Ç¨/m¬≤
- Taux de vacance locative : ${dataLocal.tauxVacance}
- Part des locataires : ${dataLocal.partLocataires}
- Population totale : ${dataLocal.population}
- Nombre de logements : ${dataLocal.nbLogements}
- Nombre de logements vacants : ${dataLocal.nbLogementsVacants}
- Nombre de r√©sidences principales : ${dataLocal.nbResidencesPrincipales}
- Nombre de r√©sidences secondaires : ${dataLocal.nbResidencesSecondaires}
- Part des dipl√¥m√©s sup√©rieurs : ${dataLocal.partDiplomesSuperieur}
- Part des personnes log√©es gratuitement : ${dataLocal.partLogesGratuit}
- Part des m√©nages 1 personne : ${dataLocal.partMenages1P}
- Part des m√©nages 5 personnes ou plus : ${dataLocal.partMenages5P}
- Part de mobilit√© r√©cente (<2 ans) : ${dataLocal.partMobiliteRecent}
- Zone tendue : ${dataLocal.zoneTendue}

‚ö†Ô∏è Utilise strictement les donn√©es locales fournies ci-dessus sans les modifier ni les ajuster, sauf si elles sont explicitement inconnues.
‚ö†Ô∏è Si une ou plusieurs donn√©es locales sont "inconnues", fais la meilleure estimation possible bas√©e sur la description du bien et ta connaissance g√©n√©rale du march√© immobilier.

---

Voici la **description** du bien √† analyser :

"""${description}"""

---

‚úÖ Ton analyse doit respecter **strictement** le format JSON suivant, sans texte autour :

{
  "rentabilite": "string (ex: '6.3%')",
  "loyer": {
    "estimation": "string (multiplie le loyer moyen de maison, petit ou grand appartement selon le type du bien, par la surface de l'appartement. Si le contexte de l'annonce est important dans cette estimation, alors d√©cris le dans l'explication. exemple: '750 ‚Ç¨/mois')",
    "explication": "string"
  },
  "fiscalite": {
    "regime": "string (En LMNP, on ne peut plus amortir les biens, si il y a des travaux conseilles plut√¥t une SCI IS, sinon le micro-foncier, exemple: 'LMNP r√©el', 'Micro-foncier', 'SCI IS')",
    "explication": "string"
  },
  "recommandations": [
    "string", "string", ...
  ],
  "forces": [
    "string", "string", ...
  ],
  "faiblesses": [
    "string", "string", ...
  ],
  "questions": [
    "string", "string", ...
  ],
  "strategie": "string",
  "estimationBien": {
    "estimation": "string (multiplie le prix moyen d'achat du type du bien par la surface, exemple: '198 000 ‚Ç¨')",
    "prixAffiche": "string (ex: '215 000 ‚Ç¨')",
    "prixM2Quartier": "string (le prix moyen achat de maison ou appartemment selon le type du bien, exemple: '3 800 ‚Ç¨/m¬≤')",
    "commentaire": "string",
    "positionnement": "string ('bonne_affaire', 'negociable', 'surcote')"
  },
  "tensionLocative": {
    "estZoneTendue": boolean,
    "commentaire": "string",
    "infoReglementaire": "string"
  }
}

---

üîµ Instruction suppl√©mentaire :
- Dans le champ "loyer.explication", indique pr√©cis√©ment le d√©tail du calcul".
`;

  // console.log("Prompt :", promptAnalyse);

  const completion = await openai.chat.completions.create({
    model: "gpt-3.5-turbo-1106",
    temperature: 0.2,
    messages: [{ role: "user", content: promptAnalyse }],
  });

  const raw = completion.choices[0].message.content;
  // console.log("üß† Analyse enrichie :", raw);

  const result = JSON.parse(raw!);

  const analyseExists = await prisma.analyse.findFirst({
    where: {
      userEmail: session.user.email,
    },
  });

  if (!analyseExists) {
    sendFirstAnalyseEmail(session.user.email);
  }

  const newAnalyse = await prisma.analyse.create({
    data: {
      userEmail: session.user.email,
      description,
      rentabilite: result.rentabilite,
      loyerEstimation: result.loyer.estimation,
      loyerExplication: result.loyer.explication,
      fiscaliteRegime: result.fiscalite.regime,
      fiscaliteExplication: result.fiscalite.explication,
      recommandations: result.recommandations,
      forces: result.forces,
      faiblesses: result.faiblesses,
      questions: result.questions,
      strategie: result.strategie,
      estimation: result.estimationBien.estimation,
      prixAffiche: result.estimationBien.prixAffiche,
      prixM2Quartier: result.estimationBien.prixM2Quartier,
      commentaireEstimation: result.estimationBien.commentaire,
      positionnement: result.estimationBien.positionnement,
      estZoneTendue: result.tensionLocative.estZoneTendue,
      commentaireZoneTendue: result.tensionLocative.commentaire,
      infoReglementaire: result.tensionLocative.infoReglementaire,
    },
  });

  result.analyseId = newAnalyse.id;

  await prisma.subscription.update({
    where: { userEmail: session.user.email },
    data: { analysesUsed: { increment: 1 } },
  });

  await sendDiscordNotification({
    userEmail: session.user.email,
    ville: ville.nom_commune,
    result,
  });

  return NextResponse.json({ result });
}
